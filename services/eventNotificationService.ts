/**
 * Envoie une notification locale pour un nouvel √©v√©nement
 * (uniquement pour l'utilisateur qui cr√©e l'√©v√©nement)
 */
export async function notifyNewEvent(eventId: string, eventTitle: string, eventDate: Date) {
    try {
        // V√©rifier si les notifications sont support√©es et autoris√©es
        if (!('Notification' in window) || Notification.permission !== 'granted') {
            console.log('‚ö†Ô∏è Notifications non disponibles ou non autoris√©es');
            return false;
        }

        // Envoyer une notification locale
        new Notification('üéâ √âv√©nement cr√©√© !', {
            body: `${eventTitle} - ${eventDate.toLocaleDateString('fr-FR', {
                day: 'numeric',
                month: 'long',
                hour: '2-digit',
                minute: '2-digit'
            })}`,
            icon: '/icons/icon-192x192.png',
            badge: '/icons/icon-96x96.png',
            tag: `event-${eventId}`,
            data: {
                url: '/?view=events',
                eventId
            }
        });

        console.log('‚úÖ Notification locale √©v√©nement envoy√©e');
        return true;
    } catch (error) {
        console.error('Erreur notification √©v√©nement:', error);
        return false;
    }
}

/**
 * Planifie un rappel 2h avant l'√©v√©nement pour les participants
 * Utilise setTimeout (fonctionne uniquement si l'app est ouverte/en arri√®re-plan)
 */
export async function scheduleEventReminder(eventId: string, userId: string, eventTitle: string, eventDate: Date) {
    try {
        const now = new Date();
        const reminderTime = new Date(eventDate.getTime() - 2 * 60 * 60 * 1000); // 2h avant

        // Ne pas planifier si l'√©v√©nement est dans moins de 2h
        if (reminderTime <= now) {
            console.log('‚ö†Ô∏è √âv√©nement trop proche, pas de rappel planifi√©');
            return false;
        }

        // Calculer le d√©lai en millisecondes
        const delay = reminderTime.getTime() - now.getTime();

        console.log(`‚è∞ Rappel planifi√© dans ${Math.round(delay / 1000 / 60)} minutes pour ${eventTitle}`);

        // Planifier la notification locale
        setTimeout(() => {
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification('‚è∞ Rappel √©v√©nement', {
                    body: `${eventTitle} commence dans 2h !`,
                    icon: '/icons/icon-192x192.png',
                    badge: '/icons/icon-96x96.png',
                    tag: `reminder-${eventId}`,
                    requireInteraction: true,
                    data: {
                        url: '/?view=events',
                        eventId
                    }
                });
                console.log('‚úÖ Rappel √©v√©nement envoy√©');
            }
        }, delay);

        return true;
    } catch (error) {
        console.error('Erreur planification rappel:', error);
        return false;
    }
}

/**
 * Annuler tous les rappels planifi√©s pour un √©v√©nement
 * Note: Avec setTimeout, on ne peut pas vraiment annuler facilement les rappels
 * Cette fonction est gard√©e pour compatibilit√© future
 */
export function cancelEventReminders(eventId: string) {
    console.log(`‚ö†Ô∏è Annulation de rappels pour ${eventId} (non impl√©ment√© en local)`);
}

